/*Каждый элемент имеет счётчик обращений. 
Новый элемент вставляется в кэш со значением счётчика равным 1. 
При попадании в кэш счётчик найденного элемента увеличивается на 1.
Если нужно освободить место, нужно найти элемент с самым маленьким значением счётчика.
Таким образом вытесняется тот элемент, которые запрашивался реже всего.
Главный недостаток LFU состоит в том, что некогда частотные элементы могут присутствовать в кэше
очень долго, даже если они уже давно не запрашивались.*/

#include "18.h"

int main()
{
	LFU a(4);

	a.find_and_add("AA");
	a.find_and_add("HH");
	a.find_and_add("CC");

	a.print();
	cout<<endl;

	a.find("HH");
	a.find("HH");
	a.find("AA");
	a.find("AA");
	a.find("AA");

	a.print();
	cout<<endl;

	cout << "The minimum = ";
	cout<<a.get_min();
	cout<<endl;


	return 0;
}